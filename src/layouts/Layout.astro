---
import AsideMenu from '../components/AsideMenu.astro'
import { ViewTransitions } from 'astro:transitions'
import { Player } from '../components/Player'
import { allPlaylists } from '../lib/data'
import './layout.css'

const { id } = Astro.params

const playlist = allPlaylists.find((playlist) => playlist.id === id) || {
  cover: "/img/img5.jpg", // Default cover image
  title: "Default Title",
}

interface Props {
  title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions fallback='none'/>
  </head>
  <body>
    <div id="app" class="relative h-screen p-2 gap-2">
      <aside class="[grid-area:aside] flex flex-col overflow-y-auto">
        <AsideMenu />
      </aside>

      <main class="[grid-area:main] rounded-lg bg-gradient-to-b from-zinc-900 to-zinc-900/60 backdrop-blur overflow-y-auto w-full">
        <slot />
      </main>

      <footer class="[grid-area:player] h-[60px] rounded-lg bg-zinc-900 bg-opacity-60 backdrop-blur">
        <Player client:load transition:name="media-player" transition:persist />
      </footer>
    </div>
    <div class="absolute h-full inset-0 -z-[1]">
    <img
      src={playlist?.cover}
      alt={playlist?.title}
      class="transition-all duration-500 -z-[1] absolute inset-0 mix-blend-overlay opacity-20 w-full h-full object-cover"
    />
  </div>

  <script is:inline defer>
    function setContainerColor(dataColor) {
      const playlistContainer = document.getElementById("playlist-container");
      const currentColor = playlistContainer?.getAttribute("data-color");
      if (dataColor && dataColor !== currentColor) {
        playlistContainer?.style.setProperty("--context-color", dataColor);
        playlistContainer?.setAttribute("data-color", dataColor);
      }
    }
  
    window.coloradTimeout = null;
    for (const playlist of document.querySelectorAll(".playlist-item")) {
      playlist.addEventListener("mouseover", () =>
        onMouseOverColorad(playlist)
      );
      playlist.addEventListener("mouseout", onMouseOutColorad);
    }
  
    function onMouseOverColorad(el) {
      if (el) {
        const dataColor = el.getAttribute("data-color");
        if (!dataColor) return;
        window.coloradTimeout = setTimeout(
          () => setContainerColor(dataColor),
          200
        );
      }
    }
  
    function onMouseOutColorad() {
      if (window.coloradTimeout) {
        clearTimeout(window.coloradTimeout);
        window.coloradTimeout = null;
      }
    }
  </script>
  </body>    
</html>
